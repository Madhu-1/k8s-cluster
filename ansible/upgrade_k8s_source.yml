---
##############################
# This playbook changes the running version of k8s by loading a
# release that has been built from source.
# Checkout k8s source and build via: 'make quick-release'
# Set the 'k8s_files' variable below to the location of the release tars
#
# It may be necessary to reboot the nodes and/or restart various services
# since this sort of "upgrade" isn't a supported operation.
#
# These steps based on: https://crondev.com/kubernetes-upgrade-kubeadm/

- hosts: all
  become: true
  vars:
    k8s_files: /home/jstrunk/src/kubernetes/_output/release-tars/
  tasks:
    - name: Copy files to nodes
      unarchive:
        src: "{{ k8s_files }}/kubernetes-server-linux-amd64.tar.gz"
        dest: /tmp

    - name: Load docker images
      command: docker load -i /tmp/kubernetes/server/bin/{{ item }}
      with_items:
        - kube-apiserver.tar
        - kube-controller-manager.tar
        - kube-proxy.tar
        - kube-scheduler.tar

    # We move the binaries instead of directly overwrite since kubelet is
    # currently running
    - name: Move old binaries
      command: mv /usr/bin/{{ item }} /usr/bin/{{ item }}.bak
      with_items:
        - kubectl
        - kubelet

    - name: Upgrade binaries
      command: cp /tmp/kubernetes/server/bin/{{ item }} /usr/bin/
      with_items:
        - kubectl
        - kubelet

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted

- hosts: master
  become: true
  tasks:
    - name: Get new container version tag
      command: cat /tmp/kubernetes/server/bin/kube-apiserver.docker_tag
      register: kubeVersion

    - name: Update container varsions in manifests
      lineinfile:
        name: /etc/kubernetes/manifests/{{ item }}.yaml
        backrefs: yes
        regexp: "    image: "
        line: "    image: gcr.io/google_containers/{{ item }}:{{kubeVersion.stdout}}"
      with_items:
        - kube-apiserver
        - kube-controller-manager
        - kube-scheduler

    - name: Patch kube-proxy DaemonSet
      command: kubectl -n kube-system patch ds/kube-proxy -p '{"spec":{"template":{"spec":{"containers":[{"name":"kube-proxy","image":"gcr.io/google_containers/kube-proxy:{{kubeVersion.stdout}}"}]}}}}'

    - name: Re-apply weave-net to allow it to upgrade if necessary
      shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

    - name: Get name of DNS pod
      command: kubectl -n kube-system get po -l k8s-app=kube-dns -o jsonpath='{.items[0].metadata.name}'
      register: dnspodname

      #-- We delete the DNS pod and the deployment will recreate it
    - name: Delete DNS pod
      command: kubectl -n kube-system delete po/{{ dnspodname.stdout }}
